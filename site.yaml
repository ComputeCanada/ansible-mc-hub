- hosts: all
  vars:
    internal_web_app_port: "5000"
  tasks:
    # Disable SELinux because of issues with podman when mounting file
    - name: Disable SELinux
      become: yes
      ansible.posix.selinux:
        state: disabled
    - name: Enable linger process for {{ ansible_user }}
      become: yes
      ansible.builtin.shell: loginctl enable-linger {{ ansible_user }}
    - name: Install EPEL repo
      become: yes
      yum:
        name: epel-release
        state: present
    - name: Install podman
      become: yes
      yum:
        name: podman
        state: installed
      tags:
        - common
    - name: Install Shibboleth service provider
      become: yes
      block:
        - name: Add Shibboleth repository
          yum_repository:
            name: shibboleth
            description: Shibboleth (CentOS_8)
            gpgcheck: no
            gpgkey: https://download.opensuse.org/repositories/security:/shibboleth/CentOS_8/repodata/repomd.xml.key
            mirrorlist: https://shibboleth.net/cgi-bin/mirrorlist.cgi/CentOS_8
        - name: Install Shibboleth package
          yum:
            name: shibboleth.x86_64
            state: installed
      tags:
        - shibboleth
    - name: Install Apache HTTPD server
      become: yes
      yum:
        name:
          - httpd.x86_64
          - mod_ssl
        state: installed
      tags:
        - apache
    - name: Configure Shibboleth service provider
      become: yes
      block:
        - name: Check if Shibboleth keys and certificates exist locally
          local_action: command stat {{ inventory_dir }}/shibboleth-crypto/{{ item }}
          become: no
          failed_when: no
          changed_when: false
          loop:
            - sp-encrypt-cert.pem
            - sp-encrypt-key.pem
            - sp-signing-cert.pem
            - sp-signing-key.pem
          register: shib_keys_and_certificates_stats
        - name: Copy Shibboleth keys and certificates
          copy:
            src: "{{ inventory_dir }}/shibboleth-crypto/{{ item.src }}"
            dest: /etc/shibboleth
            mode: "{{ item.mode }}"
          with_items:
            - {src: "sp-encrypt-cert.pem", mode: "0644"}
            - {src: "sp-encrypt-key.pem", mode: "0600"}
            - {src: "sp-signing-cert.pem", mode: "0644"}
            - {src: "sp-signing-key.pem", mode: "0600"}
          when: (shib_keys_and_certificates_stats.results | selectattr('rc') | list | length) == 0
        - name: Copy Shibboleth attribute map
          copy:
            src: files/etc/shibboleth/attribute-map.xml
            dest: /etc/shibboleth
            mode: "0644"
        - name: Download Identity Provider's metadata
          get_url:
            url: "{{ saml_identity_provider_metadata_url }}"
            dest: /etc/shibboleth/idp-metadata.xml
            mode: "0644"
        - name: Create Shibboleth main configuration file
          template:
            src: files/etc/shibboleth/shibboleth2.xml.j2
            dest: /etc/shibboleth/shibboleth2.xml
            mode: "0644"
        - name: Start Shibboleth service
          systemd:
            name: shibd
            state: started
            enabled: yes
      tags:
        - shibboleth
    - name: Configure Apache HTTPD server
      become: yes
      block:
        - name: Remove Apache welcome.conf configuration file
          file:
            path: /etc/httpd/conf.d/welcome.conf
            state: absent
        - name: Create the main Apache configuration file
          template:
            src: files/etc/httpd/conf/httpd.conf.j2
            dest: /etc/httpd/conf/httpd.conf
            mode: "0644"
        - name: Create the Shibboleth Apache configuration file
          template:
            src: files/etc/httpd/conf.d/shib.conf.j2
            dest: /etc/httpd/conf.d/shib.conf
            mode: "0644"
              #        - name: Set httpd_can_network_connect flag on
              #          seboolean:
              #            name: httpd_can_network_connect
              #            state: yes
              #            persistent: yes
        - name: Start Apache service
          systemd:
            name: httpd
            state: started
            enabled: yes
      tags:
        - apache
    - name: Prepare the bind mounts for the MC Hub container
      block:
        - name: Create the MC Hub work directory
          file:
            path: "/home/{{ ansible_user }}/mc-hub"
            state: directory
            mode: "0700"
        - name: Create the MC Hub database directory
          file:
            path: "/home/{{ ansible_user }}/mc-hub/database"
            state: directory
            mode: "0700"
        - name: Copy the OpenStack configuration file
          copy:
            src: "{{ inventory_dir }}/clouds.yaml"
            dest: "/home/{{ ansible_user }}/mc-hub"
            mode: "0600"
        - name: Copy the MC Hub configuration file
          copy:
            src: "{{ inventory_dir }}/configuration.json"
            dest: "/home/{{ ansible_user }}/mc-hub"
            mode: "0600"
        - name: Create the clusters directory
          file:
            path: "/home/{{ ansible_user }}/mc-hub/clusters"
            state: directory
            mode: "0700"
        - name: Copy the ACME registration key
          copy:
            src: "{{ inventory_dir }}/acme_key.pem"
            dest: "/home/{{ ansible_user }}/mc-hub"
            mode: "0600"
      tags:
        - docker
    - name: Start the MC Hub container
      containers.podman.podman_container:
        name: mc-hub
        image: fredericfc/magic_castle-ui:{{ mc_hub_version }}
        state: started
        env:
          MAGIC_CASTLE_ACME_KEY_PEM: /home/mcu/credentials/acme_key.pem
          OS_CLIENT_CONFIG_FILE: /home/mcu/credentials/clouds.yaml
          OS_CLOUD: "{{ default_cloud  }}"
        published_ports:
          - "{{ internal_web_app_port }}:5000"
        volumes:
          - /home/{{ ansible_user }}/mc-hub/acme_key.pem:/home/mcu/credentials/acme_key.pem
          - /home/{{ ansible_user }}/mc-hub/clouds.yaml:/home/mcu/credentials/clouds.yaml
          - /home/{{ ansible_user }}/mc-hub/configuration.json:/home/mcu/configuration.json
          - /home/{{ ansible_user }}/mc-hub/clusters:/home/mcu/clusters
          - /home/{{ ansible_user }}/mc-hub/database:/home/mcu/database
        userns: keep-id
        workdir: /home/mcu
      tags:
        - docker
    - name: Start the MC Hub clean-up container
      containers.podman.podman_container:
        name: mc-hub-cleaner
        image: fredericfc/magic_castle-ui:{{ mc_hub_version }}
        restart_policy: always
        state: started
        network_mode: host
        env:
          MCHUB_HOST: "127.0.0.1"
          MCHUB_PORT: "5000"
        volumes:
          - /home/{{ ansible_user }}/mc-hub/configuration.json:/home/mcu/configuration.json
        command: "/home/mcu/venv/bin/python -m mchub.services.cull_expired_cluster"
        userns: keep-id
      tags:
        - docker
    - name: Enable HTTPS
      # Inspired by https://certbot.eff.org/lets-encrypt/centosrhel7-apache
      block:
        - name: Install Certbot
          become: yes
          yum:
            name:
              - certbot
              - python3-certbot-apache
            state: installed
        - name: Check whether HTTPS keys and certificates already exist
          become: yes
          stat:
            path: "{{ item }}"
          loop:
            - /etc/letsencrypt/live/{{ fqdn }}/cert.pem
            - /etc/letsencrypt/live/{{ fqdn }}/privkey.pem
            - /etc/letsencrypt/live/{{ fqdn }}/chain.pem
            - /etc/letsencrypt/live/{{ fqdn }}/fullchain.pem
          register: https_keys_and_certificates_stats
        - name: Generate HTTPS certificate
          become: yes
          # Only generate HTTPS keys and certificate when they don't already exist
          when: https_keys_and_certificates_stats.results | rejectattr('stat.exists') | list
          command:
            cmd: certbot -n --apache -d {{ fqdn }} -m {{ server_admin_email }} --agree-tos certonly
        - name: Create the HTTPS Apache configuration file
          become: yes
          template:
            src: files/etc/httpd/conf.d/httpd-le-ssl.conf.j2
            dest: /etc/httpd/conf.d/httpd-le-ssl.conf
            mode: "0644"
        - name: Reload httpd
          become: yes
          ansible.builtin.service:
            name: httpd
            state: reloaded
        - name: Setup automatic HTTPS certificate renewal
          become: yes
          cron:
            name: Let's Encrypt HTTPS certificate renewal
            minute: "0"
            hour: "0,12"
            day: "*"
            month: "*"
            weekday: "*"
            user: root
            job: "python3 -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew -q"
      tags:
        - apache
          #    - name: Configure Filebeat
          #      block:
          #        - name: Create downloads directory
          #          file:
          #            path: "/home/{{ ansible_user }}/Downloads"
          #            state: directory
          #        - name: Download Filebeat
          #          get_url:
          #            url: https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.0.1-x86_64.rpm
          #            dest: "/home/{{ ansible_user }}/Downloads/filebeat.rpm"
          #        - name: Install Filebeat
          #          yum:
          #            name: "/home/{{ ansible_user }}/Downloads/filebeat.rpm"
          #            state: present
          #        - name: Configure Filebeat
          #          template:
          #            src: files/etc/filebeat/filebeat.yml
          #            dest: /etc/filebeat/filebeat.yml
          #            mode: "0644"
          #        - name: Copy logstash certificate
          #          copy:
          #            src: "{{ inventory_dir }}/logstash-servers.crt"
          #            dest: /etc/filebeat/logstash-servers.crt
          #        - name: Start Filebeat service
          #          systemd:
          #            name: filebeat
          #            state: started
          #            enabled: yes
          #      tags:
          #        - filebeat
